// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `multi_sensor_messages.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:horus_bridge.MessageType)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct MessageType {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.MessageType.IMAGE)
    pub IMAGE: ::protobuf::MessageField<Image>,
    // @@protoc_insertion_point(field:horus_bridge.MessageType.LASER_SCAN)
    pub LASER_SCAN: ::protobuf::MessageField<LaserScan>,
    // @@protoc_insertion_point(field:horus_bridge.MessageType.IMU)
    pub IMU: ::protobuf::MessageField<Imu>,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.MessageType.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageType {
    fn default() -> &'a MessageType {
        <MessageType as ::protobuf::Message>::default_instance()
    }
}

impl MessageType {
    pub fn new() -> MessageType {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Image>(
            "IMAGE",
            |m: &MessageType| { &m.IMAGE },
            |m: &mut MessageType| { &mut m.IMAGE },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LaserScan>(
            "LASER_SCAN",
            |m: &MessageType| { &m.LASER_SCAN },
            |m: &mut MessageType| { &mut m.LASER_SCAN },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Imu>(
            "IMU",
            |m: &MessageType| { &m.IMU },
            |m: &mut MessageType| { &mut m.IMU },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageType>(
            "MessageType",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageType {
    const NAME: &'static str = "MessageType";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IMAGE)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.LASER_SCAN)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.IMU)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.IMAGE.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.LASER_SCAN.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.IMU.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.IMAGE.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.LASER_SCAN.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.IMU.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageType {
        MessageType::new()
    }

    fn clear(&mut self) {
        self.IMAGE.clear();
        self.LASER_SCAN.clear();
        self.IMU.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageType {
        static instance: MessageType = MessageType {
            IMAGE: ::protobuf::MessageField::none(),
            LASER_SCAN: ::protobuf::MessageField::none(),
            IMU: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageType {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageType").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.Message)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Message.type)
    pub type_: ::protobuf::MessageField<MessageType>,
    // @@protoc_insertion_point(field:horus_bridge.Message.image)
    pub image: ::protobuf::MessageField<Image>,
    // @@protoc_insertion_point(field:horus_bridge.Message.laser_scan)
    pub laser_scan: ::protobuf::MessageField<LaserScan>,
    // @@protoc_insertion_point(field:horus_bridge.Message.imu)
    pub imu: ::protobuf::MessageField<Imu>,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MessageType>(
            "type",
            |m: &Message| { &m.type_ },
            |m: &mut Message| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Image>(
            "image",
            |m: &Message| { &m.image },
            |m: &mut Message| { &mut m.image },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, LaserScan>(
            "laser_scan",
            |m: &Message| { &m.laser_scan },
            |m: &mut Message| { &mut m.laser_scan },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Imu>(
            "imu",
            |m: &Message| { &m.imu },
            |m: &mut Message| { &mut m.imu },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.type_)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.image)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.laser_scan)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.imu)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.image.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.laser_scan.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.imu.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.image.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.laser_scan.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.imu.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.type_.clear();
        self.image.clear();
        self.laser_scan.clear();
        self.imu.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            type_: ::protobuf::MessageField::none(),
            image: ::protobuf::MessageField::none(),
            laser_scan: ::protobuf::MessageField::none(),
            imu: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.Image)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Image {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Image.width)
    pub width: u32,
    // @@protoc_insertion_point(field:horus_bridge.Image.height)
    pub height: u32,
    // @@protoc_insertion_point(field:horus_bridge.Image.encoding)
    pub encoding: ::std::string::String,
    // @@protoc_insertion_point(field:horus_bridge.Image.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Image.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Image {
    fn default() -> &'a Image {
        <Image as ::protobuf::Message>::default_instance()
    }
}

impl Image {
    pub fn new() -> Image {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &Image| { &m.width },
            |m: &mut Image| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Image| { &m.height },
            |m: &mut Image| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "encoding",
            |m: &Image| { &m.encoding },
            |m: &mut Image| { &mut m.encoding },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Image| { &m.data },
            |m: &mut Image| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Image>(
            "Image",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Image {
    const NAME: &'static str = "Image";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.width = is.read_uint32()?;
                },
                16 => {
                    self.height = is.read_uint32()?;
                },
                26 => {
                    self.encoding = is.read_string()?;
                },
                34 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.height);
        }
        if !self.encoding.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.encoding);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.width != 0 {
            os.write_uint32(1, self.width)?;
        }
        if self.height != 0 {
            os.write_uint32(2, self.height)?;
        }
        if !self.encoding.is_empty() {
            os.write_string(3, &self.encoding)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Image {
        Image::new()
    }

    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.encoding.clear();
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Image {
        static instance: Image = Image {
            width: 0,
            height: 0,
            encoding: ::std::string::String::new(),
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Image {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Image").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Image {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Image {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.LaserScan)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct LaserScan {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.header)
    pub header: ::protobuf::MessageField<Header>,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.angle_min)
    pub angle_min: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.angle_max)
    pub angle_max: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.angle_increment)
    pub angle_increment: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.time_increment)
    pub time_increment: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.scan_time)
    pub scan_time: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.range_min)
    pub range_min: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.range_max)
    pub range_max: f32,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.ranges)
    pub ranges: ::std::vec::Vec<f32>,
    // @@protoc_insertion_point(field:horus_bridge.LaserScan.intensities)
    pub intensities: ::std::vec::Vec<f32>,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.LaserScan.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LaserScan {
    fn default() -> &'a LaserScan {
        <LaserScan as ::protobuf::Message>::default_instance()
    }
}

impl LaserScan {
    pub fn new() -> LaserScan {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "header",
            |m: &LaserScan| { &m.header },
            |m: &mut LaserScan| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_min",
            |m: &LaserScan| { &m.angle_min },
            |m: &mut LaserScan| { &mut m.angle_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_max",
            |m: &LaserScan| { &m.angle_max },
            |m: &mut LaserScan| { &mut m.angle_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angle_increment",
            |m: &LaserScan| { &m.angle_increment },
            |m: &mut LaserScan| { &mut m.angle_increment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_increment",
            |m: &LaserScan| { &m.time_increment },
            |m: &mut LaserScan| { &mut m.time_increment },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "scan_time",
            |m: &LaserScan| { &m.scan_time },
            |m: &mut LaserScan| { &mut m.scan_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_min",
            |m: &LaserScan| { &m.range_min },
            |m: &mut LaserScan| { &mut m.range_min },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "range_max",
            |m: &LaserScan| { &m.range_max },
            |m: &mut LaserScan| { &mut m.range_max },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "ranges",
            |m: &LaserScan| { &m.ranges },
            |m: &mut LaserScan| { &mut m.ranges },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "intensities",
            |m: &LaserScan| { &m.intensities },
            |m: &mut LaserScan| { &mut m.intensities },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LaserScan>(
            "LaserScan",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LaserScan {
    const NAME: &'static str = "LaserScan";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                21 => {
                    self.angle_min = is.read_float()?;
                },
                29 => {
                    self.angle_max = is.read_float()?;
                },
                37 => {
                    self.angle_increment = is.read_float()?;
                },
                45 => {
                    self.time_increment = is.read_float()?;
                },
                53 => {
                    self.scan_time = is.read_float()?;
                },
                61 => {
                    self.range_min = is.read_float()?;
                },
                69 => {
                    self.range_max = is.read_float()?;
                },
                74 => {
                    is.read_repeated_packed_float_into(&mut self.ranges)?;
                },
                77 => {
                    self.ranges.push(is.read_float()?);
                },
                82 => {
                    is.read_repeated_packed_float_into(&mut self.intensities)?;
                },
                85 => {
                    self.intensities.push(is.read_float()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.angle_min != 0. {
            my_size += 1 + 4;
        }
        if self.angle_max != 0. {
            my_size += 1 + 4;
        }
        if self.angle_increment != 0. {
            my_size += 1 + 4;
        }
        if self.time_increment != 0. {
            my_size += 1 + 4;
        }
        if self.scan_time != 0. {
            my_size += 1 + 4;
        }
        if self.range_min != 0. {
            my_size += 1 + 4;
        }
        if self.range_max != 0. {
            my_size += 1 + 4;
        }
        my_size += 5 * self.ranges.len() as u64;
        my_size += 5 * self.intensities.len() as u64;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.angle_min != 0. {
            os.write_float(2, self.angle_min)?;
        }
        if self.angle_max != 0. {
            os.write_float(3, self.angle_max)?;
        }
        if self.angle_increment != 0. {
            os.write_float(4, self.angle_increment)?;
        }
        if self.time_increment != 0. {
            os.write_float(5, self.time_increment)?;
        }
        if self.scan_time != 0. {
            os.write_float(6, self.scan_time)?;
        }
        if self.range_min != 0. {
            os.write_float(7, self.range_min)?;
        }
        if self.range_max != 0. {
            os.write_float(8, self.range_max)?;
        }
        for v in &self.ranges {
            os.write_float(9, *v)?;
        };
        for v in &self.intensities {
            os.write_float(10, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LaserScan {
        LaserScan::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.angle_min = 0.;
        self.angle_max = 0.;
        self.angle_increment = 0.;
        self.time_increment = 0.;
        self.scan_time = 0.;
        self.range_min = 0.;
        self.range_max = 0.;
        self.ranges.clear();
        self.intensities.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LaserScan {
        static instance: LaserScan = LaserScan {
            header: ::protobuf::MessageField::none(),
            angle_min: 0.,
            angle_max: 0.,
            angle_increment: 0.,
            time_increment: 0.,
            scan_time: 0.,
            range_min: 0.,
            range_max: 0.,
            ranges: ::std::vec::Vec::new(),
            intensities: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LaserScan {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LaserScan").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LaserScan {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LaserScan {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.Header)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Header {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Header.seq)
    pub seq: u32,
    ///  time stamp = 2; // Consider using a more descriptive timestamp type
    // @@protoc_insertion_point(field:horus_bridge.Header.frame_id)
    pub frame_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Header.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq",
            |m: &Header| { &m.seq },
            |m: &mut Header| { &mut m.seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "frame_id",
            |m: &Header| { &m.frame_id },
            |m: &mut Header| { &mut m.frame_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Header>(
            "Header",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Header {
    const NAME: &'static str = "Header";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq = is.read_uint32()?;
                },
                26 => {
                    self.frame_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.seq);
        }
        if !self.frame_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.frame_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq != 0 {
            os.write_uint32(1, self.seq)?;
        }
        if !self.frame_id.is_empty() {
            os.write_string(3, &self.frame_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Header {
        Header::new()
    }

    fn clear(&mut self) {
        self.seq = 0;
        self.frame_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Header {
        static instance: Header = Header {
            seq: 0,
            frame_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Header {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Header").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.Imu)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Imu {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Imu.header)
    pub header: ::protobuf::MessageField<Header>,
    ///  geometry_msgs.Quaternion orientation = 2;
    ///  geometry_msgs.Vector3 angular_velocity = 3;
    ///  geometry_msgs.Vector3 linear_acceleration = 4;
    // @@protoc_insertion_point(field:horus_bridge.Imu.orientation_covariance)
    pub orientation_covariance: f64,
    // @@protoc_insertion_point(field:horus_bridge.Imu.angular_velocity_covariance)
    pub angular_velocity_covariance: f64,
    // @@protoc_insertion_point(field:horus_bridge.Imu.linear_acceleration_covariance)
    pub linear_acceleration_covariance: f64,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Imu.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Imu {
    fn default() -> &'a Imu {
        <Imu as ::protobuf::Message>::default_instance()
    }
}

impl Imu {
    pub fn new() -> Imu {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Header>(
            "header",
            |m: &Imu| { &m.header },
            |m: &mut Imu| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orientation_covariance",
            |m: &Imu| { &m.orientation_covariance },
            |m: &mut Imu| { &mut m.orientation_covariance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "angular_velocity_covariance",
            |m: &Imu| { &m.angular_velocity_covariance },
            |m: &mut Imu| { &mut m.angular_velocity_covariance },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "linear_acceleration_covariance",
            |m: &Imu| { &m.linear_acceleration_covariance },
            |m: &mut Imu| { &mut m.linear_acceleration_covariance },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Imu>(
            "Imu",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Imu {
    const NAME: &'static str = "Imu";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                41 => {
                    self.orientation_covariance = is.read_double()?;
                },
                49 => {
                    self.angular_velocity_covariance = is.read_double()?;
                },
                57 => {
                    self.linear_acceleration_covariance = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.orientation_covariance != 0. {
            my_size += 1 + 8;
        }
        if self.angular_velocity_covariance != 0. {
            my_size += 1 + 8;
        }
        if self.linear_acceleration_covariance != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.orientation_covariance != 0. {
            os.write_double(5, self.orientation_covariance)?;
        }
        if self.angular_velocity_covariance != 0. {
            os.write_double(6, self.angular_velocity_covariance)?;
        }
        if self.linear_acceleration_covariance != 0. {
            os.write_double(7, self.linear_acceleration_covariance)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Imu {
        Imu::new()
    }

    fn clear(&mut self) {
        self.header.clear();
        self.orientation_covariance = 0.;
        self.angular_velocity_covariance = 0.;
        self.linear_acceleration_covariance = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Imu {
        static instance: Imu = Imu {
            header: ::protobuf::MessageField::none(),
            orientation_covariance: 0.,
            angular_velocity_covariance: 0.,
            linear_acceleration_covariance: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Imu {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Imu").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Imu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Imu {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Messages from geometry_msgs (these may need their own file)
// @@protoc_insertion_point(message:horus_bridge.Quaternion)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Quaternion {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Quaternion.x)
    pub x: f64,
    // @@protoc_insertion_point(field:horus_bridge.Quaternion.y)
    pub y: f64,
    // @@protoc_insertion_point(field:horus_bridge.Quaternion.z)
    pub z: f64,
    // @@protoc_insertion_point(field:horus_bridge.Quaternion.w)
    pub w: f64,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Quaternion.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Quaternion {
    fn default() -> &'a Quaternion {
        <Quaternion as ::protobuf::Message>::default_instance()
    }
}

impl Quaternion {
    pub fn new() -> Quaternion {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Quaternion| { &m.x },
            |m: &mut Quaternion| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Quaternion| { &m.y },
            |m: &mut Quaternion| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Quaternion| { &m.z },
            |m: &mut Quaternion| { &mut m.z },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "w",
            |m: &Quaternion| { &m.w },
            |m: &mut Quaternion| { &mut m.w },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Quaternion>(
            "Quaternion",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Quaternion {
    const NAME: &'static str = "Quaternion";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.x = is.read_double()?;
                },
                17 => {
                    self.y = is.read_double()?;
                },
                25 => {
                    self.z = is.read_double()?;
                },
                33 => {
                    self.w = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 8;
        }
        if self.y != 0. {
            my_size += 1 + 8;
        }
        if self.z != 0. {
            my_size += 1 + 8;
        }
        if self.w != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_double(1, self.x)?;
        }
        if self.y != 0. {
            os.write_double(2, self.y)?;
        }
        if self.z != 0. {
            os.write_double(3, self.z)?;
        }
        if self.w != 0. {
            os.write_double(4, self.w)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Quaternion {
        Quaternion::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.w = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Quaternion {
        static instance: Quaternion = Quaternion {
            x: 0.,
            y: 0.,
            z: 0.,
            w: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Quaternion {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Quaternion").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Quaternion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Quaternion {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:horus_bridge.Vector3)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Vector3 {
    // message fields
    // @@protoc_insertion_point(field:horus_bridge.Vector3.x)
    pub x: f64,
    // @@protoc_insertion_point(field:horus_bridge.Vector3.y)
    pub y: f64,
    // @@protoc_insertion_point(field:horus_bridge.Vector3.z)
    pub z: f64,
    // special fields
    // @@protoc_insertion_point(special_field:horus_bridge.Vector3.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vector3 {
    fn default() -> &'a Vector3 {
        <Vector3 as ::protobuf::Message>::default_instance()
    }
}

impl Vector3 {
    pub fn new() -> Vector3 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "x",
            |m: &Vector3| { &m.x },
            |m: &mut Vector3| { &mut m.x },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "y",
            |m: &Vector3| { &m.y },
            |m: &mut Vector3| { &mut m.y },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "z",
            |m: &Vector3| { &m.z },
            |m: &mut Vector3| { &mut m.z },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vector3>(
            "Vector3",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vector3 {
    const NAME: &'static str = "Vector3";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                9 => {
                    self.x = is.read_double()?;
                },
                17 => {
                    self.y = is.read_double()?;
                },
                25 => {
                    self.z = is.read_double()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.x != 0. {
            my_size += 1 + 8;
        }
        if self.y != 0. {
            my_size += 1 + 8;
        }
        if self.z != 0. {
            my_size += 1 + 8;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.x != 0. {
            os.write_double(1, self.x)?;
        }
        if self.y != 0. {
            os.write_double(2, self.y)?;
        }
        if self.z != 0. {
            os.write_double(3, self.z)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vector3 {
        Vector3::new()
    }

    fn clear(&mut self) {
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vector3 {
        static instance: Vector3 = Vector3 {
            x: 0.,
            y: 0.,
            z: 0.,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vector3 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vector3").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vector3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vector3 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bmulti_sensor_messages.proto\x12\x0chorus_bridge\"\x95\x01\n\x0bMes\
    sageType\x12)\n\x05IMAGE\x18\x01\x20\x01(\x0b2\x13.horus_bridge.ImageR\
    \x05IMAGE\x126\n\nLASER_SCAN\x18\x02\x20\x01(\x0b2\x17.horus_bridge.Lase\
    rScanR\tLASERSCAN\x12#\n\x03IMU\x18\x03\x20\x01(\x0b2\x11.horus_bridge.I\
    muR\x03IMU\"\xc0\x01\n\x07Message\x12-\n\x04type\x18\x01\x20\x01(\x0b2\
    \x19.horus_bridge.MessageTypeR\x04type\x12)\n\x05image\x18\x02\x20\x01(\
    \x0b2\x13.horus_bridge.ImageR\x05image\x126\n\nlaser_scan\x18\x03\x20\
    \x01(\x0b2\x17.horus_bridge.LaserScanR\tlaserScan\x12#\n\x03imu\x18\x04\
    \x20\x01(\x0b2\x11.horus_bridge.ImuR\x03imu\"e\n\x05Image\x12\x14\n\x05w\
    idth\x18\x01\x20\x01(\rR\x05width\x12\x16\n\x06height\x18\x02\x20\x01(\r\
    R\x06height\x12\x1a\n\x08encoding\x18\x03\x20\x01(\tR\x08encoding\x12\
    \x12\n\x04data\x18\x04\x20\x01(\x0cR\x04data\"\xd4\x02\n\tLaserScan\x12,\
    \n\x06header\x18\x01\x20\x01(\x0b2\x14.horus_bridge.HeaderR\x06header\
    \x12\x1b\n\tangle_min\x18\x02\x20\x01(\x02R\x08angleMin\x12\x1b\n\tangle\
    _max\x18\x03\x20\x01(\x02R\x08angleMax\x12'\n\x0fangle_increment\x18\x04\
    \x20\x01(\x02R\x0eangleIncrement\x12%\n\x0etime_increment\x18\x05\x20\
    \x01(\x02R\rtimeIncrement\x12\x1b\n\tscan_time\x18\x06\x20\x01(\x02R\x08\
    scanTime\x12\x1b\n\trange_min\x18\x07\x20\x01(\x02R\x08rangeMin\x12\x1b\
    \n\trange_max\x18\x08\x20\x01(\x02R\x08rangeMax\x12\x16\n\x06ranges\x18\
    \t\x20\x03(\x02R\x06ranges\x12\x20\n\x0bintensities\x18\n\x20\x03(\x02R\
    \x0bintensities\"5\n\x06Header\x12\x10\n\x03seq\x18\x01\x20\x01(\rR\x03s\
    eq\x12\x19\n\x08frame_id\x18\x03\x20\x01(\tR\x07frameId\"\xf0\x01\n\x03I\
    mu\x12,\n\x06header\x18\x01\x20\x01(\x0b2\x14.horus_bridge.HeaderR\x06he\
    ader\x125\n\x16orientation_covariance\x18\x05\x20\x01(\x01R\x15orientati\
    onCovariance\x12>\n\x1bangular_velocity_covariance\x18\x06\x20\x01(\x01R\
    \x19angularVelocityCovariance\x12D\n\x1elinear_acceleration_covariance\
    \x18\x07\x20\x01(\x01R\x1clinearAccelerationCovariance\"D\n\nQuaternion\
    \x12\x0c\n\x01x\x18\x01\x20\x01(\x01R\x01x\x12\x0c\n\x01y\x18\x02\x20\
    \x01(\x01R\x01y\x12\x0c\n\x01z\x18\x03\x20\x01(\x01R\x01z\x12\x0c\n\x01w\
    \x18\x04\x20\x01(\x01R\x01w\"3\n\x07Vector3\x12\x0c\n\x01x\x18\x01\x20\
    \x01(\x01R\x01x\x12\x0c\n\x01y\x18\x02\x20\x01(\x01R\x01y\x12\x0c\n\x01z\
    \x18\x03\x20\x01(\x01R\x01zJ\xe6\x16\n\x06\x12\x04\0\0B\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x14\n\n\n\x02\x04\0\
    \x12\x04\x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x13\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\x05\x02\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x05\
    \x02\x04\x15\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\x02\x07\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x05\x08\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x05\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x1b\n\r\n\x05\x04\
    \0\x02\x01\x04\x12\x04\x06\x02\x05\x12\n\x0c\n\x05\x04\0\x02\x01\x06\x12\
    \x03\x06\x02\x0b\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0c\x16\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x06\x19\x1a\n9\n\x04\x04\0\x02\x02\x12\
    \x03\x07\x02\x0e\",\x20...\x20Add\x20other\x20potential\x20message\x20ty\
    pes\x20here\n\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x07\x02\x06\x1b\n\x0c\
    \n\x05\x04\0\x02\x02\x06\x12\x03\x07\x02\x05\n\x0c\n\x05\x04\0\x02\x02\
    \x01\x12\x03\x07\x06\t\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x07\x0c\r\n\
    \n\n\x02\x04\x01\x12\x04\x0b\0\x10\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0b\
    \x08\x0f\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0c\x02\x17\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04\x0c\x02\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\
    \x0c\x02\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0c\x0e\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x0c\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\
    \x03\r\x02\x12\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\r\x02\x0c\x17\n\x0c\
    \n\x05\x04\x01\x02\x01\x06\x12\x03\r\x02\x07\n\x0c\n\x05\x04\x01\x02\x01\
    \x01\x12\x03\r\x08\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\r\x10\x11\n\
    \x0b\n\x04\x04\x01\x02\x02\x12\x03\x0e\x02\x1b\n\r\n\x05\x04\x01\x02\x02\
    \x04\x12\x04\x0e\x02\r\x12\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03\x0e\
    \x02\x0b\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x0e\x0c\x16\n\x0c\n\x05\
    \x04\x01\x02\x02\x03\x12\x03\x0e\x19\x1a\n\x0b\n\x04\x04\x01\x02\x03\x12\
    \x03\x0f\x02\x0e\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04\x0f\x02\x0e\x1b\n\
    \x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x0f\x02\x05\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x0f\x06\t\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\
    \x0f\x0c\r\n\n\n\x02\x04\x02\x12\x04\x12\0\x17\x01\n\n\n\x03\x04\x02\x01\
    \x12\x03\x12\x08\r\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x13\x02\x13\n\r\n\
    \x05\x04\x02\x02\0\x04\x12\x04\x13\x02\x12\x0f\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x13\t\x0e\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x11\x12\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03\x14\x02\x14\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x14\
    \x02\x13\x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x14\x02\x08\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03\x14\t\x0f\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03\x14\x12\x13\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x15\x02\x16\
    \n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x15\x02\x14\x14\n\x0c\n\x05\x04\
    \x02\x02\x02\x05\x12\x03\x15\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\
    \x03\x15\t\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x15\x14\x15\n\x0b\
    \n\x04\x04\x02\x02\x03\x12\x03\x16\x02\x11\n\r\n\x05\x04\x02\x02\x03\x04\
    \x12\x04\x16\x02\x15\x16\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x16\x02\
    \x07\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x16\x08\x0c\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03\x16\x0f\x10\n\n\n\x02\x04\x03\x12\x04\x19\0$\
    \x01\n\n\n\x03\x04\x03\x01\x12\x03\x19\x08\x11\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03\x1a\x02\x14\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x1a\x02\x19\x13\
    \n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03\x1a\t\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1a\
    \x12\x13\n\x0b\n\x04\x04\x03\x02\x01\x12\x03\x1b\x02\x16\n\r\n\x05\x04\
    \x03\x02\x01\x04\x12\x04\x1b\x02\x1a\x14\n\x0c\n\x05\x04\x03\x02\x01\x05\
    \x12\x03\x1b\x02\x07\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1b\x08\x11\
    \n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1b\x14\x15\n\x0b\n\x04\x04\x03\
    \x02\x02\x12\x03\x1c\x02\x16\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x1c\
    \x02\x1b\x16\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1c\x02\x07\n\x0c\n\
    \x05\x04\x03\x02\x02\x01\x12\x03\x1c\x08\x11\n\x0c\n\x05\x04\x03\x02\x02\
    \x03\x12\x03\x1c\x14\x15\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x1d\x02\x1c\
    \n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1d\x02\x1c\x16\n\x0c\n\x05\x04\
    \x03\x02\x03\x05\x12\x03\x1d\x02\x07\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\
    \x03\x1d\x08\x17\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1d\x1a\x1b\n\
    \x0b\n\x04\x04\x03\x02\x04\x12\x03\x1e\x02\x1b\n\r\n\x05\x04\x03\x02\x04\
    \x04\x12\x04\x1e\x02\x1d\x1c\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03\x1e\
    \x02\x07\n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03\x1e\x08\x16\n\x0c\n\x05\
    \x04\x03\x02\x04\x03\x12\x03\x1e\x19\x1a\n\x0b\n\x04\x04\x03\x02\x05\x12\
    \x03\x1f\x02\x16\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\x1f\x02\x1e\x1b\n\
    \x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x03\
    \x02\x05\x01\x12\x03\x1f\x08\x11\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03\
    \x1f\x14\x15\n\x0b\n\x04\x04\x03\x02\x06\x12\x03\x20\x02\x16\n\r\n\x05\
    \x04\x03\x02\x06\x04\x12\x04\x20\x02\x1f\x16\n\x0c\n\x05\x04\x03\x02\x06\
    \x05\x12\x03\x20\x02\x07\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03\x20\x08\
    \x11\n\x0c\n\x05\x04\x03\x02\x06\x03\x12\x03\x20\x14\x15\n\x0b\n\x04\x04\
    \x03\x02\x07\x12\x03!\x02\x16\n\r\n\x05\x04\x03\x02\x07\x04\x12\x04!\x02\
    \x20\x16\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03!\x02\x07\n\x0c\n\x05\
    \x04\x03\x02\x07\x01\x12\x03!\x08\x11\n\x0c\n\x05\x04\x03\x02\x07\x03\
    \x12\x03!\x14\x15\n\x0b\n\x04\x04\x03\x02\x08\x12\x03\"\x02\x1c\n\x0c\n\
    \x05\x04\x03\x02\x08\x04\x12\x03\"\x02\n\n\x0c\n\x05\x04\x03\x02\x08\x05\
    \x12\x03\"\x0b\x10\n\x0c\n\x05\x04\x03\x02\x08\x01\x12\x03\"\x11\x17\n\
    \x0c\n\x05\x04\x03\x02\x08\x03\x12\x03\"\x1a\x1b\n\x0b\n\x04\x04\x03\x02\
    \t\x12\x03#\x02\"\n\x0c\n\x05\x04\x03\x02\t\x04\x12\x03#\x02\n\n\x0c\n\
    \x05\x04\x03\x02\t\x05\x12\x03#\x0b\x10\n\x0c\n\x05\x04\x03\x02\t\x01\
    \x12\x03#\x11\x1c\n\x0c\n\x05\x04\x03\x02\t\x03\x12\x03#\x1f!\n\n\n\x02\
    \x04\x04\x12\x04&\0*\x01\n\n\n\x03\x04\x04\x01\x12\x03&\x08\x0e\n\x0b\n\
    \x04\x04\x04\x02\0\x12\x03'\x02\x11\n\r\n\x05\x04\x04\x02\0\x04\x12\x04'\
    \x02&\x10\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03'\t\x0c\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03'\x0f\
    \x10\nR\n\x04\x04\x04\x02\x01\x12\x03)\x02\x16\x1aE\x20time\x20stamp\x20\
    =\x202;\x20//\x20Consider\x20using\x20a\x20more\x20descriptive\x20timest\
    amp\x20type\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04)\x02'\x11\n\x0c\n\
    \x05\x04\x04\x02\x01\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03)\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x14\x15\n\n\
    \n\x02\x04\x05\x12\x04,\04\x01\n\n\n\x03\x04\x05\x01\x12\x03,\x08\x0b\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03-\x02\x14\n\r\n\x05\x04\x05\x02\0\x04\
    \x12\x04-\x02,\r\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03-\x02\x08\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03-\t\x0f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03-\x12\x13\n\x96\x01\n\x04\x04\x05\x02\x01\x12\x031\x02$\x1a\x88\x01\
    \x20geometry_msgs.Quaternion\x20orientation\x20=\x202;\n\x20geometry_msg\
    s.Vector3\x20angular_velocity\x20=\x203;\n\x20geometry_msgs.Vector3\x20l\
    inear_acceleration\x20=\x204;\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x041\
    \x02-\x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x031\x02\x08\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x031\t\x1f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x031\"#\n\x0b\n\x04\x04\x05\x02\x02\x12\x032\x02)\n\r\n\x05\x04\x05\x02\
    \x02\x04\x12\x042\x021$\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x032\x02\x08\
    \n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x032\t$\n\x0c\n\x05\x04\x05\x02\x02\
    \x03\x12\x032'(\n\x0b\n\x04\x04\x05\x02\x03\x12\x033\x02,\n\r\n\x05\x04\
    \x05\x02\x03\x04\x12\x043\x022)\n\x0c\n\x05\x04\x05\x02\x03\x05\x12\x033\
    \x02\x08\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x033\t'\n\x0c\n\x05\x04\x05\
    \x02\x03\x03\x12\x033*+\nI\n\x02\x04\x06\x12\x047\0<\x01\x1a=\x20Message\
    s\x20from\x20geometry_msgs\x20(these\x20may\x20need\x20their\x20own\x20f\
    ile)\n\n\n\n\x03\x04\x06\x01\x12\x037\x08\x12\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x038\x02\x0f\n\r\n\x05\x04\x06\x02\0\x04\x12\x048\x027\x14\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x038\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\
    \x12\x038\t\n\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x038\r\x0e\n\x0b\n\x04\
    \x04\x06\x02\x01\x12\x039\x02\x0f\n\r\n\x05\x04\x06\x02\x01\x04\x12\x049\
    \x028\x0f\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x039\x02\x08\n\x0c\n\x05\
    \x04\x06\x02\x01\x01\x12\x039\t\n\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\
    \x039\r\x0e\n\x0b\n\x04\x04\x06\x02\x02\x12\x03:\x02\x0f\n\r\n\x05\x04\
    \x06\x02\x02\x04\x12\x04:\x029\x0f\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\
    \x03:\x02\x08\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03:\t\n\n\x0c\n\x05\
    \x04\x06\x02\x02\x03\x12\x03:\r\x0e\n\x0b\n\x04\x04\x06\x02\x03\x12\x03;\
    \x02\x0f\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04;\x02:\x0f\n\x0c\n\x05\x04\
    \x06\x02\x03\x05\x12\x03;\x02\x08\n\x0c\n\x05\x04\x06\x02\x03\x01\x12\
    \x03;\t\n\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03;\r\x0e\n\n\n\x02\x04\
    \x07\x12\x04>\0B\x01\n\n\n\x03\x04\x07\x01\x12\x03>\x08\x0f\n\x0b\n\x04\
    \x04\x07\x02\0\x12\x03?\x02\x0f\n\r\n\x05\x04\x07\x02\0\x04\x12\x04?\x02\
    >\x11\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03?\x02\x08\n\x0c\n\x05\x04\x07\
    \x02\0\x01\x12\x03?\t\n\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03?\r\x0e\n\
    \x0b\n\x04\x04\x07\x02\x01\x12\x03@\x02\x0f\n\r\n\x05\x04\x07\x02\x01\
    \x04\x12\x04@\x02?\x0f\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03@\x02\x08\
    \n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03@\t\n\n\x0c\n\x05\x04\x07\x02\
    \x01\x03\x12\x03@\r\x0e\n\x0b\n\x04\x04\x07\x02\x02\x12\x03A\x02\x0f\n\r\
    \n\x05\x04\x07\x02\x02\x04\x12\x04A\x02@\x0f\n\x0c\n\x05\x04\x07\x02\x02\
    \x05\x12\x03A\x02\x08\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03A\t\n\n\x0c\
    \n\x05\x04\x07\x02\x02\x03\x12\x03A\r\x0eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(8);
            messages.push(MessageType::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            messages.push(Image::generated_message_descriptor_data());
            messages.push(LaserScan::generated_message_descriptor_data());
            messages.push(Header::generated_message_descriptor_data());
            messages.push(Imu::generated_message_descriptor_data());
            messages.push(Quaternion::generated_message_descriptor_data());
            messages.push(Vector3::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
